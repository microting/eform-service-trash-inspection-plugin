//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrashInspectionServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", ConfigurationName="TrashInspectionServiceReference.MicrotingWS_Port")]
    public interface MicrotingWS_Port
    {
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS:WeighingFromMicroting2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TrashInspectionServiceReference.WeighingFromMicroting2_Result> WeighingFromMicroting2Async(TrashInspectionServiceReference.WeighingFromMicroting2 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS:WeighingToMicroting2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TrashInspectionServiceReference.WeighingToMicroting2_Result> WeighingToMicroting2Async(TrashInspectionServiceReference.WeighingToMicroting2 request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WeighingFromMicroting2", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", IsWrapped=true)]
    public partial class WeighingFromMicroting2
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", Order=0)]
        public string _WeighingNo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", Order=1)]
        public bool _Approved;
        
        public WeighingFromMicroting2()
        {
        }
        
        public WeighingFromMicroting2(string _WeighingNo, bool _Approved)
        {
            this._WeighingNo = _WeighingNo;
            this._Approved = _Approved;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WeighingFromMicroting2_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", IsWrapped=true)]
    public partial class WeighingFromMicroting2_Result
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", Order=0)]
        public string return_value;
        
        public WeighingFromMicroting2_Result()
        {
        }
        
        public WeighingFromMicroting2_Result(string return_value)
        {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WeighingToMicroting2", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", IsWrapped=true)]
    public partial class WeighingToMicroting2
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", Order=0)]
        public string _WeighingNo;
        
        public WeighingToMicroting2()
        {
        }
        
        public WeighingToMicroting2(string _WeighingNo)
        {
            this._WeighingNo = _WeighingNo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WeighingToMicroting2_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", IsWrapped=true)]
    public partial class WeighingToMicroting2_Result
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/MicrotingWS", Order=0)]
        public string return_value;
        
        public WeighingToMicroting2_Result()
        {
        }
        
        public WeighingToMicroting2_Result(string return_value)
        {
            this.return_value = return_value;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface MicrotingWS_PortChannel : TrashInspectionServiceReference.MicrotingWS_Port, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class MicrotingWS_PortClient : System.ServiceModel.ClientBase<TrashInspectionServiceReference.MicrotingWS_Port>, TrashInspectionServiceReference.MicrotingWS_Port
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MicrotingWS_PortClient() : 
                base(MicrotingWS_PortClient.GetDefaultBinding(), MicrotingWS_PortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.MicrotingWS_Port.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MicrotingWS_PortClient(EndpointConfiguration endpointConfiguration) : 
                base(MicrotingWS_PortClient.GetBindingForEndpoint(endpointConfiguration), MicrotingWS_PortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MicrotingWS_PortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MicrotingWS_PortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MicrotingWS_PortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MicrotingWS_PortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MicrotingWS_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TrashInspectionServiceReference.WeighingFromMicroting2_Result> TrashInspectionServiceReference.MicrotingWS_Port.WeighingFromMicroting2Async(TrashInspectionServiceReference.WeighingFromMicroting2 request)
        {
            return base.Channel.WeighingFromMicroting2Async(request);
        }
        
        public System.Threading.Tasks.Task<TrashInspectionServiceReference.WeighingFromMicroting2_Result> WeighingFromMicroting2Async(string _WeighingNo, bool _Approved)
        {
            TrashInspectionServiceReference.WeighingFromMicroting2 inValue = new TrashInspectionServiceReference.WeighingFromMicroting2();
            inValue._WeighingNo = _WeighingNo;
            inValue._Approved = _Approved;
            return ((TrashInspectionServiceReference.MicrotingWS_Port)(this)).WeighingFromMicroting2Async(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TrashInspectionServiceReference.WeighingToMicroting2_Result> TrashInspectionServiceReference.MicrotingWS_Port.WeighingToMicroting2Async(TrashInspectionServiceReference.WeighingToMicroting2 request)
        {
            return base.Channel.WeighingToMicroting2Async(request);
        }
        
        public System.Threading.Tasks.Task<TrashInspectionServiceReference.WeighingToMicroting2_Result> WeighingToMicroting2Async(string _WeighingNo)
        {
            TrashInspectionServiceReference.WeighingToMicroting2 inValue = new TrashInspectionServiceReference.WeighingToMicroting2();
            inValue._WeighingNo = _WeighingNo;
            return ((TrashInspectionServiceReference.MicrotingWS_Port)(this)).WeighingToMicroting2Async(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MicrotingWS_Port))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MicrotingWS_Port))
            {
                return new System.ServiceModel.EndpointAddress("http://navwebservice.odenserenovation.dk:7047/DynamicsNAV100UDV/WS/CRONUS Danmark" +
                        " A%252FS/Codeunit/MicrotingWS");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MicrotingWS_PortClient.GetBindingForEndpoint(EndpointConfiguration.MicrotingWS_Port);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MicrotingWS_PortClient.GetEndpointAddress(EndpointConfiguration.MicrotingWS_Port);
        }
        
        public enum EndpointConfiguration
        {
            
            MicrotingWS_Port,
        }
    }
}
